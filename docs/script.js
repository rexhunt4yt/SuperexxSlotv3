/* simplified shared logic */
const CONFIG = { costMin:1, costMax:10, costDefault:1, jackpotBase:200, jackpotThreshold:1000, jackpotPercentPerSpin:1, bonusDaily:2, maxMultiplier:20, symbolsCount:7 };
let theme='pokemon'; let balance=null; let stats={plays:0,totalBet:0,totalWon:0,jackpot:CONFIG.jackpotBase,betSinceReset:0,history:[]}; const LOCAL_KEY='superexx_v1_state';
function loadState(){ const r=localStorage.getItem(LOCAL_KEY); if(r){ try{const o=JSON.parse(r); stats=o.stats; balance=o.balance;}catch(e){ initDefault(); }}else initDefault(); render(); }
function saveState(){ localStorage.setItem(LOCAL_KEY, JSON.stringify({stats,balance})); }
function initDefault(){ balance=100; stats={plays:0,totalBet:0,totalWon:0,jackpot:CONFIG.jackpotBase,betSinceReset:0,history:[]}; saveState(); }
function render(){ document.getElementById('balance-amount').textContent = balance + ' JT'; document.getElementById('jackpot-label').textContent = stats.jackpot + ' jetons ('+stats.jackpot+' €)'; const pct = Math.min(100, Math.round((stats.betSinceReset / CONFIG.jackpotThreshold)*100)); document.getElementById('jackpot-bar').style.width = pct + '%'; document.getElementById('theme-label') && (document.getElementById('theme-label').textContent = theme==='pokemon'?'Pokémon':'Yu-Gi-Oh'); }
function pickSymbol(){ return Math.floor(Math.random()*CONFIG.symbolsCount); }
function evaluate(reels,bet){ const map={}; reels.forEach(r=>map[r]=(map[r]||0)+1); let best=0; for(let k in map) if(map[k]>best) best=map[k]; if(best>=5) return {win: stats.jackpot, jackpot:true, multiplier:null}; if(best===4) return {win: bet*CONFIG.maxMultiplier*0.5, jackpot:false, multiplier:CONFIG.maxMultiplier*0.5}; if(best===3) return {win: bet*10, jackpot:false, multiplier:10}; if(best===2) return {win: bet*2, jackpot:false, multiplier:2}; return {win:0, jackpot:false, multiplier:0}; }
async function spin(bet){ if(bet<CONFIG.costMin||bet>CONFIG.costMax) return; if(balance<bet){ log('Solde insuffisant'); return; } balance-=bet; stats.totalBet+=bet; stats.betSinceReset+=bet; playSound('spin'); render(); saveState(); const reelsEl = Array.from(document.querySelectorAll('.symbol')); const ticks=30; let results=[]; for(let t=0;t<ticks;t++){ for(let i=0;i<reelsEl.length;i++){ const idx = pickSymbol(); reelsEl[i].innerHTML = `<img src="assets/${theme}/sym_${idx}.svg" style="width:100%;height:100%"/>`; } await new Promise(r=>setTimeout(r,25 + t*6)); } for(let i=0;i<5;i++) results.push(pickSymbol()); for(let i=0;i<reelsEl.length;i++) reelsEl[i].innerHTML = `<img src="assets/${theme}/sym_${results[i]}.svg" style="width:100%;height:100%"/>`; const res = evaluate(results, bet); if(res.win>0){ balance += Math.round(res.win); stats.totalWon += Math.round(res.win); stats.history.unshift({date:Date.now(), type: res.jackpot?'JACKPOT':'WIN', amount:Math.round(res.win)}); playSound(res.jackpot ? 'jackpot' : 'win'); log(res.jackpot ? `JACKPOT! Tu as gagné ${Math.round(res.win)} jetons!` : `Gagné ${Math.round(res.win)} jetons (${res.multiplier}x)`); if(res.jackpot){ stats.jackpot = CONFIG.jackpotBase; stats.betSinceReset = 0; } } else { log('Perdu. Essaie encore !'); } stats.jackpot += bet * CONFIG.jackpotPercentPerSpin; stats.plays += 1; if(stats.betSinceReset >= CONFIG.jackpotThreshold*0.8){ showBoost(); } render(); saveState(); }
function log(msg){ document.getElementById('log').textContent = msg; }
const audioCtx = new (window.AudioContext||window.webkitAudioContext)(); function playSound(name){ try{ if(name==='spin'){ simpleBeep(660,0.04); } if(name==='win'){ simpleBeep(880,0.16); setTimeout(()=>simpleBeep(1320,0.08),120); } if(name==='jackpot'){ simpleBeep(440,0.25); setTimeout(()=>simpleBeep(880,0.25),300); setTimeout(()=>simpleBeep(1320,0.25),650); } }catch(e){} } function simpleBeep(freq,dur){ const o = audioCtx.createOscillator(); const g = audioCtx.createGain(); o.type='square'; o.frequency.value = freq; g.gain.value = 0.001; o.connect(g); g.connect(audioCtx.destination); o.start(); g.gain.linearRampToValueAtTime(0.12, audioCtx.currentTime+0.01); g.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime+dur); setTimeout(()=>o.stop(), dur*1000+50); }
document.addEventListener('DOMContentLoaded', ()=>{ document.getElementById('spin-btn').addEventListener('click', ()=>{ const bet = Number(document.getElementById('bet-input').value)||CONFIG.costDefault; spin(bet); }); document.getElementById('theme-pokemon').addEventListener('click', ()=>{ theme='pokemon'; render(); }); document.getElementById('theme-yugioh').addEventListener('click', ()=>{ theme='yugioh'; render(); }); document.getElementById('daily-btn').addEventListener('click', ()=>{ balance+=CONFIG.bonusDaily; saveState(); render(); log('Bonus journalier reçu: +'+CONFIG.bonusDaily+' JT'); }); document.getElementById('admin-add1').addEventListener('click', ()=>{ balance+=1; saveState(); render(); }); document.getElementById('admin-add5').addEventListener('click', ()=>{ balance+=5; saveState(); render(); }); document.addEventListener('keydown', (e)=>{ if(e.ctrlKey && e.key==='a'){ const ap=document.getElementById('admin-panel'); ap.style.display = ap.style.display==='none'?'block':'none'; } }); loadState(); });